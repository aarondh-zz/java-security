
package org.daisleyharrison.security.samples.spring.microservices.vunerabilityservice.models.cve;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import io.jsondb.annotation.Document;
import io.jsondb.annotation.Id;


/**
 * JSON Schema for Common Vulnerability Scoring System version 3.1
 * <p>
 * 
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "version",
    "vectorString",
    "attackVector",
    "attackComplexity",
    "privilegesRequired",
    "userInteraction",
    "scope",
    "confidentialityImpact",
    "integrityImpact",
    "availabilityImpact",
    "baseScore",
    "baseSeverity",
    "exploitCodeMaturity",
    "remediationLevel",
    "reportConfidence",
    "temporalScore",
    "temporalSeverity",
    "confidentialityRequirement",
    "integrityRequirement",
    "availabilityRequirement",
    "modifiedAttackVector",
    "modifiedAttackComplexity",
    "modifiedPrivilegesRequired",
    "modifiedUserInteraction",
    "modifiedScope",
    "modifiedConfidentialityImpact",
    "modifiedIntegrityImpact",
    "modifiedAvailabilityImpact",
    "environmentalScore",
    "environmentalSeverity"
})
@Document(collection = "vulnerabilities", schemaVersion = "1.0")
public class Vulnerability implements Serializable
{

    /**
     * CVSS Version
     * (Required)
     * 
     */
    @JsonProperty("version")
    @JsonPropertyDescription("CVSS Version")
    private Vulnerability.Version version;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("id")
    @Id
    private String id;
    @JsonProperty("vectorString")
    private String vectorString;
    @JsonProperty("attackVector")
    private Vulnerability.AttackVector attackVector;
    @JsonProperty("attackComplexity")
    private Vulnerability.AttackComplexity attackComplexity;
    @JsonProperty("privilegesRequired")
    private Vulnerability.PrivilegesRequired privilegesRequired;
    @JsonProperty("userInteraction")
    private Vulnerability.UserInteraction userInteraction;
    @JsonProperty("scope")
    private Vulnerability.Scope scope;
    @JsonProperty("confidentialityImpact")
    private Vulnerability.ConfidentialityImpact confidentialityImpact;
    @JsonProperty("integrityImpact")
    private Vulnerability.IntegrityImpact integrityImpact;
    @JsonProperty("availabilityImpact")
    private Vulnerability.AvailabilityImpact availabilityImpact;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseScore")
    private Double baseScore;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseSeverity")
    private Vulnerability.BaseSeverity baseSeverity;
    @JsonProperty("exploitCodeMaturity")
    private Vulnerability.ExploitCodeMaturity exploitCodeMaturity;
    @JsonProperty("remediationLevel")
    private Vulnerability.RemediationLevel remediationLevel;
    @JsonProperty("reportConfidence")
    private Vulnerability.ReportConfidence reportConfidence;
    @JsonProperty("temporalScore")
    private Double temporalScore;
    @JsonProperty("temporalSeverity")
    private Vulnerability.TemporalSeverity temporalSeverity;
    @JsonProperty("confidentialityRequirement")
    private Vulnerability.ConfidentialityRequirement confidentialityRequirement;
    @JsonProperty("integrityRequirement")
    private Vulnerability.IntegrityRequirement integrityRequirement;
    @JsonProperty("availabilityRequirement")
    private Vulnerability.AvailabilityRequirement availabilityRequirement;
    @JsonProperty("modifiedAttackVector")
    private Vulnerability.ModifiedAttackVector modifiedAttackVector;
    @JsonProperty("modifiedAttackComplexity")
    private Vulnerability.ModifiedAttackComplexity modifiedAttackComplexity;
    @JsonProperty("modifiedPrivilegesRequired")
    private Vulnerability.ModifiedPrivilegesRequired modifiedPrivilegesRequired;
    @JsonProperty("modifiedUserInteraction")
    private Vulnerability.ModifiedUserInteraction modifiedUserInteraction;
    @JsonProperty("modifiedScope")
    private Vulnerability.ModifiedScope modifiedScope;
    @JsonProperty("modifiedConfidentialityImpact")
    private Vulnerability.ModifiedConfidentialityImpact modifiedConfidentialityImpact;
    @JsonProperty("modifiedIntegrityImpact")
    private Vulnerability.ModifiedIntegrityImpact modifiedIntegrityImpact;
    @JsonProperty("modifiedAvailabilityImpact")
    private Vulnerability.ModifiedAvailabilityImpact modifiedAvailabilityImpact;
    @JsonProperty("environmentalScore")
    private Double environmentalScore;
    @JsonProperty("environmentalSeverity")
    private Vulnerability.EnvironmentalSeverity environmentalSeverity;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();
    private final static long serialVersionUID = -5789725098443207646L;

    /**
     * No args constructor for use in serialization
     * 
     */
    public Vulnerability() {
    }

    /**
     * 
     * @param availabilityImpact
     * @param scope
     * @param privilegesRequired
     * @param modifiedPrivilegesRequired
     * @param modifiedIntegrityImpact
     * @param modifiedScope
     * @param version
     * @param modifiedAttackVector
     * @param vectorString
     * @param userInteraction
     * @param baseScore
     * @param baseSeverity
     * @param remediationLevel
     * @param attackComplexity
     * @param confidentialityImpact
     * @param environmentalScore
     * @param availabilityRequirement
     * @param modifiedAttackComplexity
     * @param temporalScore
     * @param exploitCodeMaturity
     * @param integrityImpact
     * @param modifiedAvailabilityImpact
     * @param reportConfidence
     * @param modifiedUserInteraction
     * @param integrityRequirement
     * @param attackVector
     * @param environmentalSeverity
     * @param temporalSeverity
     * @param modifiedConfidentialityImpact
     * @param confidentialityRequirement
     */
    public Vulnerability(Vulnerability.Version version, String vectorString, Vulnerability.AttackVector attackVector, Vulnerability.AttackComplexity attackComplexity, Vulnerability.PrivilegesRequired privilegesRequired, Vulnerability.UserInteraction userInteraction, Vulnerability.Scope scope, Vulnerability.ConfidentialityImpact confidentialityImpact, Vulnerability.IntegrityImpact integrityImpact, Vulnerability.AvailabilityImpact availabilityImpact, Double baseScore, Vulnerability.BaseSeverity baseSeverity, Vulnerability.ExploitCodeMaturity exploitCodeMaturity, Vulnerability.RemediationLevel remediationLevel, Vulnerability.ReportConfidence reportConfidence, Double temporalScore, Vulnerability.TemporalSeverity temporalSeverity, Vulnerability.ConfidentialityRequirement confidentialityRequirement, Vulnerability.IntegrityRequirement integrityRequirement, Vulnerability.AvailabilityRequirement availabilityRequirement, Vulnerability.ModifiedAttackVector modifiedAttackVector, Vulnerability.ModifiedAttackComplexity modifiedAttackComplexity, Vulnerability.ModifiedPrivilegesRequired modifiedPrivilegesRequired, Vulnerability.ModifiedUserInteraction modifiedUserInteraction, Vulnerability.ModifiedScope modifiedScope, Vulnerability.ModifiedConfidentialityImpact modifiedConfidentialityImpact, Vulnerability.ModifiedIntegrityImpact modifiedIntegrityImpact, Vulnerability.ModifiedAvailabilityImpact modifiedAvailabilityImpact, Double environmentalScore, Vulnerability.EnvironmentalSeverity environmentalSeverity) {
        super();
        this.version = version;
        this.vectorString = vectorString;
        this.attackVector = attackVector;
        this.attackComplexity = attackComplexity;
        this.privilegesRequired = privilegesRequired;
        this.userInteraction = userInteraction;
        this.scope = scope;
        this.confidentialityImpact = confidentialityImpact;
        this.integrityImpact = integrityImpact;
        this.availabilityImpact = availabilityImpact;
        this.baseScore = baseScore;
        this.baseSeverity = baseSeverity;
        this.exploitCodeMaturity = exploitCodeMaturity;
        this.remediationLevel = remediationLevel;
        this.reportConfidence = reportConfidence;
        this.temporalScore = temporalScore;
        this.temporalSeverity = temporalSeverity;
        this.confidentialityRequirement = confidentialityRequirement;
        this.integrityRequirement = integrityRequirement;
        this.availabilityRequirement = availabilityRequirement;
        this.modifiedAttackVector = modifiedAttackVector;
        this.modifiedAttackComplexity = modifiedAttackComplexity;
        this.modifiedPrivilegesRequired = modifiedPrivilegesRequired;
        this.modifiedUserInteraction = modifiedUserInteraction;
        this.modifiedScope = modifiedScope;
        this.modifiedConfidentialityImpact = modifiedConfidentialityImpact;
        this.modifiedIntegrityImpact = modifiedIntegrityImpact;
        this.modifiedAvailabilityImpact = modifiedAvailabilityImpact;
        this.environmentalScore = environmentalScore;
        this.environmentalSeverity = environmentalSeverity;
    }

    /**
     * CVSS Version
     * (Required)
     * 
     */
    @JsonProperty("version")
    public Vulnerability.Version getVersion() {
        return version;
    }

    /**
     * CVSS Version
     * (Required)
     * 
     */
    @JsonProperty("version")
    public void setVersion(Vulnerability.Version version) {
        this.version = version;
    }

    public Vulnerability withVersion(Vulnerability.Version version) {
        this.version = version;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("vectorString")
    public String getVectorString() {
        return vectorString;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("vectorString")
    public void setVectorString(String vectorString) {
        this.vectorString = vectorString;
    }

    public Vulnerability withVectorString(String vectorString) {
        this.vectorString = vectorString;
        return this;
    }

    @JsonProperty("attackVector")
    public Vulnerability.AttackVector getAttackVector() {
        return attackVector;
    }

    @JsonProperty("attackVector")
    public void setAttackVector(Vulnerability.AttackVector attackVector) {
        this.attackVector = attackVector;
    }

    public Vulnerability withAttackVector(Vulnerability.AttackVector attackVector) {
        this.attackVector = attackVector;
        return this;
    }

    @JsonProperty("attackComplexity")
    public Vulnerability.AttackComplexity getAttackComplexity() {
        return attackComplexity;
    }

    @JsonProperty("attackComplexity")
    public void setAttackComplexity(Vulnerability.AttackComplexity attackComplexity) {
        this.attackComplexity = attackComplexity;
    }

    public Vulnerability withAttackComplexity(Vulnerability.AttackComplexity attackComplexity) {
        this.attackComplexity = attackComplexity;
        return this;
    }

    @JsonProperty("privilegesRequired")
    public Vulnerability.PrivilegesRequired getPrivilegesRequired() {
        return privilegesRequired;
    }

    @JsonProperty("privilegesRequired")
    public void setPrivilegesRequired(Vulnerability.PrivilegesRequired privilegesRequired) {
        this.privilegesRequired = privilegesRequired;
    }

    public Vulnerability withPrivilegesRequired(Vulnerability.PrivilegesRequired privilegesRequired) {
        this.privilegesRequired = privilegesRequired;
        return this;
    }

    @JsonProperty("userInteraction")
    public Vulnerability.UserInteraction getUserInteraction() {
        return userInteraction;
    }

    @JsonProperty("userInteraction")
    public void setUserInteraction(Vulnerability.UserInteraction userInteraction) {
        this.userInteraction = userInteraction;
    }

    public Vulnerability withUserInteraction(Vulnerability.UserInteraction userInteraction) {
        this.userInteraction = userInteraction;
        return this;
    }

    @JsonProperty("scope")
    public Vulnerability.Scope getScope() {
        return scope;
    }

    @JsonProperty("scope")
    public void setScope(Vulnerability.Scope scope) {
        this.scope = scope;
    }

    public Vulnerability withScope(Vulnerability.Scope scope) {
        this.scope = scope;
        return this;
    }

    @JsonProperty("confidentialityImpact")
    public Vulnerability.ConfidentialityImpact getConfidentialityImpact() {
        return confidentialityImpact;
    }

    @JsonProperty("confidentialityImpact")
    public void setConfidentialityImpact(Vulnerability.ConfidentialityImpact confidentialityImpact) {
        this.confidentialityImpact = confidentialityImpact;
    }

    public Vulnerability withConfidentialityImpact(Vulnerability.ConfidentialityImpact confidentialityImpact) {
        this.confidentialityImpact = confidentialityImpact;
        return this;
    }

    @JsonProperty("integrityImpact")
    public Vulnerability.IntegrityImpact getIntegrityImpact() {
        return integrityImpact;
    }

    @JsonProperty("integrityImpact")
    public void setIntegrityImpact(Vulnerability.IntegrityImpact integrityImpact) {
        this.integrityImpact = integrityImpact;
    }

    public Vulnerability withIntegrityImpact(Vulnerability.IntegrityImpact integrityImpact) {
        this.integrityImpact = integrityImpact;
        return this;
    }

    @JsonProperty("availabilityImpact")
    public Vulnerability.AvailabilityImpact getAvailabilityImpact() {
        return availabilityImpact;
    }

    @JsonProperty("availabilityImpact")
    public void setAvailabilityImpact(Vulnerability.AvailabilityImpact availabilityImpact) {
        this.availabilityImpact = availabilityImpact;
    }

    public Vulnerability withAvailabilityImpact(Vulnerability.AvailabilityImpact availabilityImpact) {
        this.availabilityImpact = availabilityImpact;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseScore")
    public Double getBaseScore() {
        return baseScore;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseScore")
    public void setBaseScore(Double baseScore) {
        this.baseScore = baseScore;
    }

    public Vulnerability withBaseScore(Double baseScore) {
        this.baseScore = baseScore;
        return this;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseSeverity")
    public Vulnerability.BaseSeverity getBaseSeverity() {
        return baseSeverity;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("baseSeverity")
    public void setBaseSeverity(Vulnerability.BaseSeverity baseSeverity) {
        this.baseSeverity = baseSeverity;
    }

    public Vulnerability withBaseSeverity(Vulnerability.BaseSeverity baseSeverity) {
        this.baseSeverity = baseSeverity;
        return this;
    }

    @JsonProperty("exploitCodeMaturity")
    public Vulnerability.ExploitCodeMaturity getExploitCodeMaturity() {
        return exploitCodeMaturity;
    }

    @JsonProperty("exploitCodeMaturity")
    public void setExploitCodeMaturity(Vulnerability.ExploitCodeMaturity exploitCodeMaturity) {
        this.exploitCodeMaturity = exploitCodeMaturity;
    }

    public Vulnerability withExploitCodeMaturity(Vulnerability.ExploitCodeMaturity exploitCodeMaturity) {
        this.exploitCodeMaturity = exploitCodeMaturity;
        return this;
    }

    @JsonProperty("remediationLevel")
    public Vulnerability.RemediationLevel getRemediationLevel() {
        return remediationLevel;
    }

    @JsonProperty("remediationLevel")
    public void setRemediationLevel(Vulnerability.RemediationLevel remediationLevel) {
        this.remediationLevel = remediationLevel;
    }

    public Vulnerability withRemediationLevel(Vulnerability.RemediationLevel remediationLevel) {
        this.remediationLevel = remediationLevel;
        return this;
    }

    @JsonProperty("reportConfidence")
    public Vulnerability.ReportConfidence getReportConfidence() {
        return reportConfidence;
    }

    @JsonProperty("reportConfidence")
    public void setReportConfidence(Vulnerability.ReportConfidence reportConfidence) {
        this.reportConfidence = reportConfidence;
    }

    public Vulnerability withReportConfidence(Vulnerability.ReportConfidence reportConfidence) {
        this.reportConfidence = reportConfidence;
        return this;
    }

    @JsonProperty("temporalScore")
    public Double getTemporalScore() {
        return temporalScore;
    }

    @JsonProperty("temporalScore")
    public void setTemporalScore(Double temporalScore) {
        this.temporalScore = temporalScore;
    }

    public Vulnerability withTemporalScore(Double temporalScore) {
        this.temporalScore = temporalScore;
        return this;
    }

    @JsonProperty("temporalSeverity")
    public Vulnerability.TemporalSeverity getTemporalSeverity() {
        return temporalSeverity;
    }

    @JsonProperty("temporalSeverity")
    public void setTemporalSeverity(Vulnerability.TemporalSeverity temporalSeverity) {
        this.temporalSeverity = temporalSeverity;
    }

    public Vulnerability withTemporalSeverity(Vulnerability.TemporalSeverity temporalSeverity) {
        this.temporalSeverity = temporalSeverity;
        return this;
    }

    @JsonProperty("confidentialityRequirement")
    public Vulnerability.ConfidentialityRequirement getConfidentialityRequirement() {
        return confidentialityRequirement;
    }

    @JsonProperty("confidentialityRequirement")
    public void setConfidentialityRequirement(Vulnerability.ConfidentialityRequirement confidentialityRequirement) {
        this.confidentialityRequirement = confidentialityRequirement;
    }

    public Vulnerability withConfidentialityRequirement(Vulnerability.ConfidentialityRequirement confidentialityRequirement) {
        this.confidentialityRequirement = confidentialityRequirement;
        return this;
    }

    @JsonProperty("integrityRequirement")
    public Vulnerability.IntegrityRequirement getIntegrityRequirement() {
        return integrityRequirement;
    }

    @JsonProperty("integrityRequirement")
    public void setIntegrityRequirement(Vulnerability.IntegrityRequirement integrityRequirement) {
        this.integrityRequirement = integrityRequirement;
    }

    public Vulnerability withIntegrityRequirement(Vulnerability.IntegrityRequirement integrityRequirement) {
        this.integrityRequirement = integrityRequirement;
        return this;
    }

    @JsonProperty("availabilityRequirement")
    public Vulnerability.AvailabilityRequirement getAvailabilityRequirement() {
        return availabilityRequirement;
    }

    @JsonProperty("availabilityRequirement")
    public void setAvailabilityRequirement(Vulnerability.AvailabilityRequirement availabilityRequirement) {
        this.availabilityRequirement = availabilityRequirement;
    }

    public Vulnerability withAvailabilityRequirement(Vulnerability.AvailabilityRequirement availabilityRequirement) {
        this.availabilityRequirement = availabilityRequirement;
        return this;
    }

    @JsonProperty("modifiedAttackVector")
    public Vulnerability.ModifiedAttackVector getModifiedAttackVector() {
        return modifiedAttackVector;
    }

    @JsonProperty("modifiedAttackVector")
    public void setModifiedAttackVector(Vulnerability.ModifiedAttackVector modifiedAttackVector) {
        this.modifiedAttackVector = modifiedAttackVector;
    }

    public Vulnerability withModifiedAttackVector(Vulnerability.ModifiedAttackVector modifiedAttackVector) {
        this.modifiedAttackVector = modifiedAttackVector;
        return this;
    }

    @JsonProperty("modifiedAttackComplexity")
    public Vulnerability.ModifiedAttackComplexity getModifiedAttackComplexity() {
        return modifiedAttackComplexity;
    }

    @JsonProperty("modifiedAttackComplexity")
    public void setModifiedAttackComplexity(Vulnerability.ModifiedAttackComplexity modifiedAttackComplexity) {
        this.modifiedAttackComplexity = modifiedAttackComplexity;
    }

    public Vulnerability withModifiedAttackComplexity(Vulnerability.ModifiedAttackComplexity modifiedAttackComplexity) {
        this.modifiedAttackComplexity = modifiedAttackComplexity;
        return this;
    }

    @JsonProperty("modifiedPrivilegesRequired")
    public Vulnerability.ModifiedPrivilegesRequired getModifiedPrivilegesRequired() {
        return modifiedPrivilegesRequired;
    }

    @JsonProperty("modifiedPrivilegesRequired")
    public void setModifiedPrivilegesRequired(Vulnerability.ModifiedPrivilegesRequired modifiedPrivilegesRequired) {
        this.modifiedPrivilegesRequired = modifiedPrivilegesRequired;
    }

    public Vulnerability withModifiedPrivilegesRequired(Vulnerability.ModifiedPrivilegesRequired modifiedPrivilegesRequired) {
        this.modifiedPrivilegesRequired = modifiedPrivilegesRequired;
        return this;
    }

    @JsonProperty("modifiedUserInteraction")
    public Vulnerability.ModifiedUserInteraction getModifiedUserInteraction() {
        return modifiedUserInteraction;
    }

    @JsonProperty("modifiedUserInteraction")
    public void setModifiedUserInteraction(Vulnerability.ModifiedUserInteraction modifiedUserInteraction) {
        this.modifiedUserInteraction = modifiedUserInteraction;
    }

    public Vulnerability withModifiedUserInteraction(Vulnerability.ModifiedUserInteraction modifiedUserInteraction) {
        this.modifiedUserInteraction = modifiedUserInteraction;
        return this;
    }

    @JsonProperty("modifiedScope")
    public Vulnerability.ModifiedScope getModifiedScope() {
        return modifiedScope;
    }

    @JsonProperty("modifiedScope")
    public void setModifiedScope(Vulnerability.ModifiedScope modifiedScope) {
        this.modifiedScope = modifiedScope;
    }

    public Vulnerability withModifiedScope(Vulnerability.ModifiedScope modifiedScope) {
        this.modifiedScope = modifiedScope;
        return this;
    }

    @JsonProperty("modifiedConfidentialityImpact")
    public Vulnerability.ModifiedConfidentialityImpact getModifiedConfidentialityImpact() {
        return modifiedConfidentialityImpact;
    }

    @JsonProperty("modifiedConfidentialityImpact")
    public void setModifiedConfidentialityImpact(Vulnerability.ModifiedConfidentialityImpact modifiedConfidentialityImpact) {
        this.modifiedConfidentialityImpact = modifiedConfidentialityImpact;
    }

    public Vulnerability withModifiedConfidentialityImpact(Vulnerability.ModifiedConfidentialityImpact modifiedConfidentialityImpact) {
        this.modifiedConfidentialityImpact = modifiedConfidentialityImpact;
        return this;
    }

    @JsonProperty("modifiedIntegrityImpact")
    public Vulnerability.ModifiedIntegrityImpact getModifiedIntegrityImpact() {
        return modifiedIntegrityImpact;
    }

    @JsonProperty("modifiedIntegrityImpact")
    public void setModifiedIntegrityImpact(Vulnerability.ModifiedIntegrityImpact modifiedIntegrityImpact) {
        this.modifiedIntegrityImpact = modifiedIntegrityImpact;
    }

    public Vulnerability withModifiedIntegrityImpact(Vulnerability.ModifiedIntegrityImpact modifiedIntegrityImpact) {
        this.modifiedIntegrityImpact = modifiedIntegrityImpact;
        return this;
    }

    @JsonProperty("modifiedAvailabilityImpact")
    public Vulnerability.ModifiedAvailabilityImpact getModifiedAvailabilityImpact() {
        return modifiedAvailabilityImpact;
    }

    @JsonProperty("modifiedAvailabilityImpact")
    public void setModifiedAvailabilityImpact(Vulnerability.ModifiedAvailabilityImpact modifiedAvailabilityImpact) {
        this.modifiedAvailabilityImpact = modifiedAvailabilityImpact;
    }

    public Vulnerability withModifiedAvailabilityImpact(Vulnerability.ModifiedAvailabilityImpact modifiedAvailabilityImpact) {
        this.modifiedAvailabilityImpact = modifiedAvailabilityImpact;
        return this;
    }

    @JsonProperty("environmentalScore")
    public Double getEnvironmentalScore() {
        return environmentalScore;
    }

    @JsonProperty("environmentalScore")
    public void setEnvironmentalScore(Double environmentalScore) {
        this.environmentalScore = environmentalScore;
    }

    public Vulnerability withEnvironmentalScore(Double environmentalScore) {
        this.environmentalScore = environmentalScore;
        return this;
    }

    @JsonProperty("environmentalSeverity")
    public Vulnerability.EnvironmentalSeverity getEnvironmentalSeverity() {
        return environmentalSeverity;
    }

    @JsonProperty("environmentalSeverity")
    public void setEnvironmentalSeverity(Vulnerability.EnvironmentalSeverity environmentalSeverity) {
        this.environmentalSeverity = environmentalSeverity;
    }

    public Vulnerability withEnvironmentalSeverity(Vulnerability.EnvironmentalSeverity environmentalSeverity) {
        this.environmentalSeverity = environmentalSeverity;
        return this;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }

    public Vulnerability withAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
        return this;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("version", version).append("vectorString", vectorString).append("attackVector", attackVector).append("attackComplexity", attackComplexity).append("privilegesRequired", privilegesRequired).append("userInteraction", userInteraction).append("scope", scope).append("confidentialityImpact", confidentialityImpact).append("integrityImpact", integrityImpact).append("availabilityImpact", availabilityImpact).append("baseScore", baseScore).append("baseSeverity", baseSeverity).append("exploitCodeMaturity", exploitCodeMaturity).append("remediationLevel", remediationLevel).append("reportConfidence", reportConfidence).append("temporalScore", temporalScore).append("temporalSeverity", temporalSeverity).append("confidentialityRequirement", confidentialityRequirement).append("integrityRequirement", integrityRequirement).append("availabilityRequirement", availabilityRequirement).append("modifiedAttackVector", modifiedAttackVector).append("modifiedAttackComplexity", modifiedAttackComplexity).append("modifiedPrivilegesRequired", modifiedPrivilegesRequired).append("modifiedUserInteraction", modifiedUserInteraction).append("modifiedScope", modifiedScope).append("modifiedConfidentialityImpact", modifiedConfidentialityImpact).append("modifiedIntegrityImpact", modifiedIntegrityImpact).append("modifiedAvailabilityImpact", modifiedAvailabilityImpact).append("environmentalScore", environmentalScore).append("environmentalSeverity", environmentalSeverity).append("additionalProperties", additionalProperties).toString();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(availabilityImpact).append(scope).append(modifiedPrivilegesRequired).append(privilegesRequired).append(modifiedIntegrityImpact).append(modifiedScope).append(version).append(modifiedAttackVector).append(vectorString).append(userInteraction).append(baseScore).append(baseSeverity).append(remediationLevel).append(attackComplexity).append(confidentialityImpact).append(environmentalScore).append(modifiedAttackComplexity).append(availabilityRequirement).append(temporalScore).append(exploitCodeMaturity).append(integrityImpact).append(modifiedAvailabilityImpact).append(reportConfidence).append(modifiedUserInteraction).append(integrityRequirement).append(attackVector).append(additionalProperties).append(environmentalSeverity).append(temporalSeverity).append(modifiedConfidentialityImpact).append(confidentialityRequirement).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulnerability) == false) {
            return false;
        }
        Vulnerability rhs = ((Vulnerability) other);
        return new EqualsBuilder().append(availabilityImpact, rhs.availabilityImpact).append(scope, rhs.scope).append(modifiedPrivilegesRequired, rhs.modifiedPrivilegesRequired).append(privilegesRequired, rhs.privilegesRequired).append(modifiedIntegrityImpact, rhs.modifiedIntegrityImpact).append(modifiedScope, rhs.modifiedScope).append(version, rhs.version).append(modifiedAttackVector, rhs.modifiedAttackVector).append(vectorString, rhs.vectorString).append(userInteraction, rhs.userInteraction).append(baseScore, rhs.baseScore).append(baseSeverity, rhs.baseSeverity).append(remediationLevel, rhs.remediationLevel).append(attackComplexity, rhs.attackComplexity).append(confidentialityImpact, rhs.confidentialityImpact).append(environmentalScore, rhs.environmentalScore).append(modifiedAttackComplexity, rhs.modifiedAttackComplexity).append(availabilityRequirement, rhs.availabilityRequirement).append(temporalScore, rhs.temporalScore).append(exploitCodeMaturity, rhs.exploitCodeMaturity).append(integrityImpact, rhs.integrityImpact).append(modifiedAvailabilityImpact, rhs.modifiedAvailabilityImpact).append(reportConfidence, rhs.reportConfidence).append(modifiedUserInteraction, rhs.modifiedUserInteraction).append(integrityRequirement, rhs.integrityRequirement).append(attackVector, rhs.attackVector).append(additionalProperties, rhs.additionalProperties).append(environmentalSeverity, rhs.environmentalSeverity).append(temporalSeverity, rhs.temporalSeverity).append(modifiedConfidentialityImpact, rhs.modifiedConfidentialityImpact).append(confidentialityRequirement, rhs.confidentialityRequirement).isEquals();
    }

    public enum AttackComplexity {

        HIGH("HIGH"),
        LOW("LOW");
        private final String value;
        private final static Map<String, Vulnerability.AttackComplexity> CONSTANTS = new HashMap<String, Vulnerability.AttackComplexity>();

        static {
            for (Vulnerability.AttackComplexity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private AttackComplexity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.AttackComplexity fromValue(String value) {
            Vulnerability.AttackComplexity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum AttackVector {

        NETWORK("NETWORK"),
        ADJACENT_NETWORK("ADJACENT_NETWORK"),
        LOCAL("LOCAL"),
        PHYSICAL("PHYSICAL");
        private final String value;
        private final static Map<String, Vulnerability.AttackVector> CONSTANTS = new HashMap<String, Vulnerability.AttackVector>();

        static {
            for (Vulnerability.AttackVector c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private AttackVector(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.AttackVector fromValue(String value) {
            Vulnerability.AttackVector constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum AvailabilityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        PARTIAL("PARTIAL"),
        COMPLETE("COMPLETE");
        private final String value;
        private final static Map<String, Vulnerability.AvailabilityImpact> CONSTANTS = new HashMap<String, Vulnerability.AvailabilityImpact>();

        static {
            for (Vulnerability.AvailabilityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private AvailabilityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.AvailabilityImpact fromValue(String value) {
            Vulnerability.AvailabilityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum AvailabilityRequirement {

        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.AvailabilityRequirement> CONSTANTS = new HashMap<String, Vulnerability.AvailabilityRequirement>();

        static {
            for (Vulnerability.AvailabilityRequirement c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private AvailabilityRequirement(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.AvailabilityRequirement fromValue(String value) {
            Vulnerability.AvailabilityRequirement constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum BaseSeverity {

        NONE("NONE"),
        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        CRITICAL("CRITICAL");
        private final String value;
        private final static Map<String, Vulnerability.BaseSeverity> CONSTANTS = new HashMap<String, Vulnerability.BaseSeverity>();

        static {
            for (Vulnerability.BaseSeverity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private BaseSeverity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.BaseSeverity fromValue(String value) {
            Vulnerability.BaseSeverity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ConfidentialityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        PARTIAL("PARTIAL"),
        COMPLETE("COMPLETE");
        private final String value;
        private final static Map<String, Vulnerability.ConfidentialityImpact> CONSTANTS = new HashMap<String, Vulnerability.ConfidentialityImpact>();

        static {
            for (Vulnerability.ConfidentialityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ConfidentialityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ConfidentialityImpact fromValue(String value) {
            Vulnerability.ConfidentialityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ConfidentialityRequirement {

        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ConfidentialityRequirement> CONSTANTS = new HashMap<String, Vulnerability.ConfidentialityRequirement>();

        static {
            for (Vulnerability.ConfidentialityRequirement c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ConfidentialityRequirement(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ConfidentialityRequirement fromValue(String value) {
            Vulnerability.ConfidentialityRequirement constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum EnvironmentalSeverity {

        NONE("NONE"),
        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        CRITICAL("CRITICAL");
        private final String value;
        private final static Map<String, Vulnerability.EnvironmentalSeverity> CONSTANTS = new HashMap<String, Vulnerability.EnvironmentalSeverity>();

        static {
            for (Vulnerability.EnvironmentalSeverity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private EnvironmentalSeverity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.EnvironmentalSeverity fromValue(String value) {
            Vulnerability.EnvironmentalSeverity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ExploitCodeMaturity {

        UNPROVEN("UNPROVEN"),
        PROOF_OF_CONCEPT("PROOF_OF_CONCEPT"),
        FUNCTIONAL("FUNCTIONAL"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ExploitCodeMaturity> CONSTANTS = new HashMap<String, Vulnerability.ExploitCodeMaturity>();

        static {
            for (Vulnerability.ExploitCodeMaturity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ExploitCodeMaturity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ExploitCodeMaturity fromValue(String value) {
            Vulnerability.ExploitCodeMaturity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum IntegrityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        PARTIAL("PARTIAL"),
        COMPLETE("COMPLETE");
        private final String value;
        private final static Map<String, Vulnerability.IntegrityImpact> CONSTANTS = new HashMap<String, Vulnerability.IntegrityImpact>();

        static {
            for (Vulnerability.IntegrityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private IntegrityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.IntegrityImpact fromValue(String value) {
            Vulnerability.IntegrityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum IntegrityRequirement {

        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.IntegrityRequirement> CONSTANTS = new HashMap<String, Vulnerability.IntegrityRequirement>();

        static {
            for (Vulnerability.IntegrityRequirement c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private IntegrityRequirement(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.IntegrityRequirement fromValue(String value) {
            Vulnerability.IntegrityRequirement constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedAttackComplexity {

        HIGH("HIGH"),
        LOW("LOW"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedAttackComplexity> CONSTANTS = new HashMap<String, Vulnerability.ModifiedAttackComplexity>();

        static {
            for (Vulnerability.ModifiedAttackComplexity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedAttackComplexity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedAttackComplexity fromValue(String value) {
            Vulnerability.ModifiedAttackComplexity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedAttackVector {

        NETWORK("NETWORK"),
        ADJACENT_NETWORK("ADJACENT_NETWORK"),
        LOCAL("LOCAL"),
        PHYSICAL("PHYSICAL"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedAttackVector> CONSTANTS = new HashMap<String, Vulnerability.ModifiedAttackVector>();

        static {
            for (Vulnerability.ModifiedAttackVector c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedAttackVector(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedAttackVector fromValue(String value) {
            Vulnerability.ModifiedAttackVector constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedAvailabilityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedAvailabilityImpact> CONSTANTS = new HashMap<String, Vulnerability.ModifiedAvailabilityImpact>();

        static {
            for (Vulnerability.ModifiedAvailabilityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedAvailabilityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedAvailabilityImpact fromValue(String value) {
            Vulnerability.ModifiedAvailabilityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedConfidentialityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedConfidentialityImpact> CONSTANTS = new HashMap<String, Vulnerability.ModifiedConfidentialityImpact>();

        static {
            for (Vulnerability.ModifiedConfidentialityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedConfidentialityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedConfidentialityImpact fromValue(String value) {
            Vulnerability.ModifiedConfidentialityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedIntegrityImpact {

        NONE("NONE"),
        LOW("LOW"),
        HIGH("HIGH"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedIntegrityImpact> CONSTANTS = new HashMap<String, Vulnerability.ModifiedIntegrityImpact>();

        static {
            for (Vulnerability.ModifiedIntegrityImpact c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedIntegrityImpact(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedIntegrityImpact fromValue(String value) {
            Vulnerability.ModifiedIntegrityImpact constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedPrivilegesRequired {

        HIGH("HIGH"),
        LOW("LOW"),
        NONE("NONE"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedPrivilegesRequired> CONSTANTS = new HashMap<String, Vulnerability.ModifiedPrivilegesRequired>();

        static {
            for (Vulnerability.ModifiedPrivilegesRequired c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedPrivilegesRequired(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedPrivilegesRequired fromValue(String value) {
            Vulnerability.ModifiedPrivilegesRequired constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedScope {

        UNCHANGED("UNCHANGED"),
        CHANGED("CHANGED"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedScope> CONSTANTS = new HashMap<String, Vulnerability.ModifiedScope>();

        static {
            for (Vulnerability.ModifiedScope c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedScope(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedScope fromValue(String value) {
            Vulnerability.ModifiedScope constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ModifiedUserInteraction {

        NONE("NONE"),
        REQUIRED("REQUIRED"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ModifiedUserInteraction> CONSTANTS = new HashMap<String, Vulnerability.ModifiedUserInteraction>();

        static {
            for (Vulnerability.ModifiedUserInteraction c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ModifiedUserInteraction(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ModifiedUserInteraction fromValue(String value) {
            Vulnerability.ModifiedUserInteraction constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum PrivilegesRequired {

        HIGH("HIGH"),
        LOW("LOW"),
        NONE("NONE");
        private final String value;
        private final static Map<String, Vulnerability.PrivilegesRequired> CONSTANTS = new HashMap<String, Vulnerability.PrivilegesRequired>();

        static {
            for (Vulnerability.PrivilegesRequired c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private PrivilegesRequired(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.PrivilegesRequired fromValue(String value) {
            Vulnerability.PrivilegesRequired constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum RemediationLevel {

        OFFICIAL_FIX("OFFICIAL_FIX"),
        TEMPORARY_FIX("TEMPORARY_FIX"),
        WORKAROUND("WORKAROUND"),
        UNAVAILABLE("UNAVAILABLE"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.RemediationLevel> CONSTANTS = new HashMap<String, Vulnerability.RemediationLevel>();

        static {
            for (Vulnerability.RemediationLevel c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private RemediationLevel(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.RemediationLevel fromValue(String value) {
            Vulnerability.RemediationLevel constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum ReportConfidence {

        UNKNOWN("UNKNOWN"),
        REASONABLE("REASONABLE"),
        CONFIRMED("CONFIRMED"),
        NOT_DEFINED("NOT_DEFINED");
        private final String value;
        private final static Map<String, Vulnerability.ReportConfidence> CONSTANTS = new HashMap<String, Vulnerability.ReportConfidence>();

        static {
            for (Vulnerability.ReportConfidence c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private ReportConfidence(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.ReportConfidence fromValue(String value) {
            Vulnerability.ReportConfidence constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum Scope {

        UNCHANGED("UNCHANGED"),
        CHANGED("CHANGED");
        private final String value;
        private final static Map<String, Vulnerability.Scope> CONSTANTS = new HashMap<String, Vulnerability.Scope>();

        static {
            for (Vulnerability.Scope c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private Scope(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.Scope fromValue(String value) {
            Vulnerability.Scope constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum TemporalSeverity {

        NONE("NONE"),
        LOW("LOW"),
        MEDIUM("MEDIUM"),
        HIGH("HIGH"),
        CRITICAL("CRITICAL");
        private final String value;
        private final static Map<String, Vulnerability.TemporalSeverity> CONSTANTS = new HashMap<String, Vulnerability.TemporalSeverity>();

        static {
            for (Vulnerability.TemporalSeverity c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private TemporalSeverity(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.TemporalSeverity fromValue(String value) {
            Vulnerability.TemporalSeverity constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum UserInteraction {

        NONE("NONE"),
        REQUIRED("REQUIRED");
        private final String value;
        private final static Map<String, Vulnerability.UserInteraction> CONSTANTS = new HashMap<String, Vulnerability.UserInteraction>();

        static {
            for (Vulnerability.UserInteraction c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private UserInteraction(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.UserInteraction fromValue(String value) {
            Vulnerability.UserInteraction constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

    public enum Version {

        _3_1("3.1"), _3_0("3.0"), _2_0("2.0");
        private final String value;
        private final static Map<String, Vulnerability.Version> CONSTANTS = new HashMap<String, Vulnerability.Version>();

        static {
            for (Vulnerability.Version c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        private Version(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static Vulnerability.Version fromValue(String value) {
            Vulnerability.Version constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}
