package org.daisleyharrison.security.samples.spring.microservices.vunerabilityservice.controllers;

import java.util.stream.Collectors;

import java.util.List;
import org.daisleyharrison.security.common.models.datastore.DatastoreCollection;
import org.daisleyharrison.security.samples.spring.microservices.shared.models.PagedResponse;
import org.daisleyharrison.security.samples.spring.microservices.vunerabilityservice.models.cve.Vulnerability;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("api/v1")
public class VulnerabilityController {
    private DatastoreCollection<Vulnerability> vulnerabilityCollection;

    public VulnerabilityController(DatastoreCollection<Vulnerability> vulnerabilityCollection) {
        this.vulnerabilityCollection = vulnerabilityCollection;
    }

    @GetMapping("/vulnerability")
    public ResponseEntity<PagedResponse<Vulnerability>> getVulnerabilities(
            @RequestParam(value = "q", required = false) String query,
            @RequestParam(value = "p", required = false, defaultValue = "0") int pageNumber,
            @RequestParam(value = "ps", required = false, defaultValue = "10") int pageSize) {

        long totalSize = vulnerabilityCollection.count();
        List<Vulnerability> data = vulnerabilityCollection.find().skip(pageNumber * pageSize).limit(pageSize)
                .collect(Collectors.toList());
        return ResponseEntity.ok(new PagedResponse<>(pageNumber, pageSize, totalSize, data));
    }

    @GetMapping("/vulnerability/{id}")
    public ResponseEntity<Vulnerability> getVulnerability(@PathVariable String id) {
        Vulnerability vulnerability = vulnerabilityCollection.findById(id);
        if (vulnerability == null) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok(vulnerability);
        }
    }

    @PostMapping("/vulnerability")
    public ResponseEntity<Vulnerability> postVulnerability(@RequestBody Vulnerability vulnerability) {
        if (vulnerability.getVectorString() == null || vulnerability.getVectorString() == null
                || vulnerability.getVersion() != Vulnerability.Version._3_1) {
            return ResponseEntity.badRequest().build();
        }
        vulnerabilityCollection.insert(vulnerability);
        return new ResponseEntity<>(vulnerability, HttpStatus.CREATED);
    }

    @PutMapping("/vulnerability/{id}")
    public ResponseEntity<Vulnerability> putVulnerability(@PathVariable String id, Vulnerability vulnerability) {
        if (vulnerability.getVectorString() == null || vulnerability.getVectorString() == null
                || vulnerability.getVersion() != Vulnerability.Version._3_1) {
            return ResponseEntity.badRequest().build();
        }

        Vulnerability origVulnerability = vulnerabilityCollection.findById(id);
        if (origVulnerability == null) {
            return ResponseEntity.notFound().build();
        } else if (origVulnerability.getVectorString().equals(vulnerability.getVectorString())) {
            vulnerabilityCollection.save(vulnerability);
            return ResponseEntity.ok(vulnerability);
        } else {
            return ResponseEntity.badRequest().build();
        }
    }

    @DeleteMapping("/vulnerability/{id}")
    public ResponseEntity<Vulnerability> deleteVulnerability(@PathVariable String id) {
        Vulnerability vulnerability = vulnerabilityCollection.findById(id);
        if (vulnerability == null) {
            return ResponseEntity.notFound().build();
        } else if (vulnerabilityCollection.remove(vulnerability)) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}