package org.daisleyharrison.security.samples.spring.microservices.vunerabilityservice.datafeeds;

import java.io.IOException;
import java.io.InputStream;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.daisleyharrison.security.samples.spring.microservices.shared.datafeed.DatafeedMetaData;
import org.daisleyharrison.security.samples.spring.microservices.shared.datafeed.Datafeed;
import org.daisleyharrison.security.samples.spring.microservices.shared.datafeed.DatafeedMetaData.Status;
import org.daisleyharrison.security.samples.spring.microservices.vunerabilityservice.models.cve.CveItem;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NistCveDataFeed implements Datafeed<CveItem> {
    private static final Logger LOGGER = LoggerFactory.getLogger(NistCveDataFeed.class);

    private static final ObjectMapper objectMapper = new ObjectMapper();

    private DatafeedMetaData metaData;

    public NistCveDataFeed() {
        metaData = new DatafeedMetaData();
    }

    @Override
    public DatafeedMetaData getMetaData() {
        return metaData;
    }

    /**
     * parse the NIST CVE data feed
     * 
     * @param inputStream json input stream
     * @param action      function called for each CVE
     * @throws IOException
     */
    public void parse(InputStream inputStream, Action<CveItem> action) throws IOException {
        JsonFactory factory = new JsonFactory();
        JsonParser jsonParser = factory.createParser(inputStream);

        metaData.setStatus(Status.PROCESSING);
        metaData.setFeedOrganization("NIST");

        int itemNumber = 0;

        while (!jsonParser.isClosed()) {
            JsonToken jsonToken = jsonParser.nextToken();

            if (JsonToken.FIELD_NAME.equals(jsonToken)) {
                String fieldName = jsonParser.getCurrentName();

                jsonToken = jsonParser.nextToken();

                if ("CVE_data_type".equals(fieldName)) {
                    metaData.setFeedType(jsonParser.getValueAsString());
                } else if ("CVE_data_format".equals(fieldName)) {
                    metaData.setFeedSchema(jsonParser.getValueAsString());
                } else if ("CVE_data_version".equals(fieldName)) {
                    metaData.setFeedSchemaVersion(jsonParser.getValueAsString());
                } else if ("CVE_data_numberOfCVEs".equals(fieldName)) {
                    metaData.setItems(jsonParser.getValueAsInt());
                } else if ("CVE_data_timestamp".equals(fieldName)) {
                    metaData.setFeedTimestamp(jsonParser.getValueAsString());
                    metaData.setId(metaData.getFeedType() + "/" + metaData.getFeedTimestamp());
                } else if ("CVE_Items".equals(fieldName)) {
                    if (JsonToken.START_ARRAY.equals(jsonToken)) {
                        while (!jsonParser.isClosed()) {
                            try {
                                jsonToken = jsonParser.nextToken();
                                if (JsonToken.END_ARRAY.equals(jsonToken)) {
                                    break;
                                } else if (JsonToken.START_OBJECT.equals(jsonToken)) {
                                    itemNumber++;
                                    CveItem cveItem = objectMapper.readValue(jsonParser, new TypeReference<CveItem>() {
                                    });
                                    if (!action.action(cveItem)) {
                                        metaData.incrementProcessed();
                                        metaData.setStatus(Status.ABORTED);
                                        return;
                                    }
                                    metaData.incrementProcessed();
                                }
                            } catch (Exception exception) {
                                metaData.incrementErrors();
                                LOGGER.error("Error processing CVE_item #{}: {}", itemNumber, exception.getMessage());
                            }
                            if (metaData.getErrors() >= metaData.getMaxErrorsAllowed()) {
                                metaData.setStatus(Status.ERROR);
                                LOGGER.error("Maximum number of errors ({}) exceeding. Data feed processing terminated",
                                metaData.getMaxErrorsAllowed());
                                    throw new IOException("Max errors exceeded");
                            }
                        } // while !jsonParse.isClosed
                    } // if START_ARRAY
                } // if CVE_Items
            } // if FIELD_NAME token
        } // while !jsonParse.isClosed
        metaData.setStatus(Status.COMPLETE);
    }
}